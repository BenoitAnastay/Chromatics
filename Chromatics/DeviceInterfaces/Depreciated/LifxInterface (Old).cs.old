using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using LifxNet;
using Color = System.Drawing.Color;

/* Contains all Lifx SDK code for detection, initilization, states and effects.
 */

namespace Chromatics
{
    partial class Chromatics
    {
        private int _LifxBulbs;
        private Task _LIFXpendingUpdateColor;

        private Action _LIFXpendingUpdateColorAction;

        private Action _LIFXpendingUpdateColorActionBright;
        private Task _LIFXpendingUpdateColorBright;
        private LifxClient client;
        private readonly Dictionary<LightBulb, int> LifxBulbsDat = new Dictionary<LightBulb, int>();

        private readonly Dictionary<LightBulb, LightStateResponse> LifxBulbsRestore =
            new Dictionary<LightBulb, LightStateResponse>();

        private readonly Dictionary<string, LightBulb> LifxDevices = new Dictionary<string, LightBulb>();
        private readonly Dictionary<string, int> LifxModeMemory = new Dictionary<string, int>();

        private readonly Dictionary<uint, string> LIFXproductids = new Dictionary<uint, string>
        {
            //Keys
            {1, "LIFX Original 1000"},
            {3, "LIFX Color 650"},
            {10, "LIFX White 800"},
            {11, "LIFX White 800"},
            {18, "LIFX White 900 BR30"},
            {20, "LIFX Color 1000 BR30"},
            {22, "LIFX Color 1000"},
            {27, "LIFX A19"},
            {28, "LIFX BR30"},
            {29, "LIFX+ A19"},
            {30, "LIFX+ BR30"},
            {31, "LIFX Z"}
        };

        private readonly Dictionary<string, int> LifxStateMemory = new Dictionary<string, int>();

        public void InitializeLIFXSDK()
        {
            WriteConsole(ConsoleTypes.LIFX, "Attempting to load LIFX SDK..");

            var task = LifxClient.CreateAsync();
            task.Wait();
            client = task.Result;
            client.DeviceDiscovered += LIFXClient_DeviceDiscovered;
            client.DeviceLost += LIFXClient_DeviceLost;
            client.StartDeviceDiscovery();

            WriteConsole(ConsoleTypes.LIFX, "LIFX SDK Loaded");
        }

        private void LIFXClient_DeviceLost(object sender, LifxClient.DeviceDiscoveryEventArgs e)
        {
            WriteConsole(ConsoleTypes.LIFX, "LIFX Device Lost: " + e.Device.HostName + " (" + e.Device.MacAddress + ")");
            LifxBulbsDat.Remove(e.Device as LightBulb);
            LifxBulbsRestore.Remove(e.Device as LightBulb);
            LifxDevices.Remove(e.Device.MacAddressName);

            if (_LifxBulbs > 0)
                _LifxBulbs--;

            if (_LifxBulbs == 0)
            {
                LifxSDK = false;
                LifxSDKCalled = 0;
                WriteConsole(ConsoleTypes.LIFX, "LIFX SDK Disabled (No Devices Found)");
            }

            ResetDeviceDataGrid();
        }

        private async void LIFXClient_DeviceDiscovered(object sender, LifxClient.DeviceDiscoveryEventArgs e)
        {
            var version = await client.GetDeviceVersionAsync(e.Device);
            var state = await client.GetLightStateAsync(e.Device as LightBulb);
            var defaultmode = 1;

            if (!LifxModeMemory.ContainsKey(e.Device.MacAddressName))
            {
                //Save to devices.chromatics
                LifxModeMemory.Add(e.Device.MacAddressName, defaultmode);
                LifxStateMemory.Add(e.Device.MacAddressName, 1);
                SaveDevices();
            }
            else
            {
                //Load from devices.chromatics
                defaultmode = LifxModeMemory[e.Device.MacAddressName];
            }

            LifxBulbsDat.Add(e.Device as LightBulb, defaultmode);
            LifxBulbsRestore.Add(e.Device as LightBulb, state);
            LifxDevices.Add(e.Device.MacAddressName, e.Device as LightBulb);


            _LifxBulbs++;

            if (LifxSDK == false && _LifxBulbs > 0)
            {
                LifxSDK = true;
                LifxSDKCalled = 1;
                WriteConsole(ConsoleTypes.LIFX, "LIFX SDK Enabled");
            }

            WriteConsole(ConsoleTypes.LIFX, "LIFX Device Found: " + state.Label + " (" + e.Device.MacAddressName + ")");

            ResetDeviceDataGrid();
        }

        public async void LIFXRestoreState()
        {
            foreach (var d in LifxBulbsRestore)
            {
                var state = d.Value;
                await client.SetColorAsync(d.Key, state.Hue, state.Saturation, state.Brightness, state.Kelvin,
                    TimeSpan.FromMilliseconds(1000));
                WriteConsole(ConsoleTypes.LIFX, "Restoring LIFX Bulb " + state.Label);
                //Thread.Sleep(500);
            }
        }

        public async void LIFXUpdateState(int mode, Color col, int transition)
        {
            if (LifxSDK && _LifxBulbs > 0)
            {
                if (_LIFXpendingUpdateColor != null)
                {
                    _LIFXpendingUpdateColorAction = () => LIFXUpdateState(mode, col, transition);
                    return;
                }

                var _transition = TimeSpan.FromMilliseconds(transition);
                var _col = new LifxNet.Color();
                _col.R = col.R;
                _col.G = col.G;
                _col.B = col.B;

                //ushort _hue = Convert.ToUInt16(col.GetHue());
                //ushort _sat = Convert.ToUInt16(col.GetSaturation());
                //ushort _bright = Convert.ToUInt16(col.GetBrightness());
                ushort _kelvin = 2700;

                foreach (var d in LifxBulbsDat)
                    if (d.Value == mode || mode == 100)
                    {
                        if (LifxStateMemory[d.Key.MacAddressName] == 0) { return; }
                        var state = await client.GetLightStateAsync(d.Key);
                        var setColorTask = client.SetColorAsync(d.Key, _col, _kelvin, _transition);
                        var throttleTask = Task.Delay(50);
                            //Ensure task takes minimum 50 ms (no more than 20 messages per second)
                        _LIFXpendingUpdateColor = Task.WhenAll(setColorTask, throttleTask);
                    }

                _LIFXpendingUpdateColor = null;
                if (_LIFXpendingUpdateColorAction != null)
                {
                    var a = _LIFXpendingUpdateColorAction;
                    _LIFXpendingUpdateColorAction = null;
                    a();
                }
            }
        }

        public async void LIFXUpdateStateBrightness(int mode, Color col, ushort brightness, int transition)
        {
            if (LifxSDK && _LifxBulbs > 0)
            {
                if (_LIFXpendingUpdateColorBright != null)
                {
                    _LIFXpendingUpdateColorActionBright =
                        () => LIFXUpdateStateBrightness(mode, col, brightness, transition);
                    return;
                }

                var _transition = TimeSpan.FromMilliseconds(transition);
                
                var _hue = col.GetHue();
                var _sat = col.GetSaturation();
                var _bright = col.GetBrightness();

                var hue = (_hue - Convert.ToUInt16(0f)) * (65535 - 0) / (Convert.ToUInt16(360f) - Convert.ToUInt16(0f)) +
                          0;
                var sat = (_sat - Convert.ToUInt16(0f)) * (65535 - 0) / (Convert.ToUInt16(1f) - Convert.ToUInt16(0f)) +
                          0;
                var bright = (_bright - Convert.ToUInt16(0f)) * (65535 - 0) /
                             (Convert.ToUInt16(1f) - Convert.ToUInt16(0f)) + 0;

                ushort _kelvin = 2700;

                if (mode == 10) _kelvin = 6000;

                foreach (var d in LifxBulbsDat)
                    if (d.Value == mode || mode == 100)
                    {
                        if (LifxStateMemory[d.Key.MacAddressName] == 0) { return; }
                        var state = await client.GetLightStateAsync(d.Key);
                        var setColorTask = client.SetColorAsync(d.Key, (ushort) hue, (ushort) sat, brightness, _kelvin,
                            _transition);
                        var throttleTask = Task.Delay(50);
                            //Ensure task takes minimum 50 ms (no more than 20 messages per second)
                        _LIFXpendingUpdateColorBright = Task.WhenAll(setColorTask, throttleTask);
                    }

                _LIFXpendingUpdateColorBright = null;
                if (_LIFXpendingUpdateColorActionBright != null)
                {
                    var a = _LIFXpendingUpdateColorActionBright;
                    _LIFXpendingUpdateColorActionBright = null;
                    a();
                }
            }
        }
    }
}