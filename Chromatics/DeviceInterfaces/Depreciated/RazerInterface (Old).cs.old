using Corale.Colore.Core;
using Corale.Colore.Razer.Mouse;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

/* Contains all Razer SDK code (via Colore) for detection, initilization, states and effects.
 * Corale.Colore.dll is used to port the Razer SDK into C#
 * https://github.com/CoraleStudios/Colore
 */

namespace Chromatics
{
    partial class Chromatics
    {
        private bool RazerDeviceKeyboard = false;
        private bool RazerDeviceKeypad = false;
        private bool RazerDeviceMouse = false;
        private bool RazerDeviceMousepad = false;
        private bool RazerDeviceHeadset = false;
        private bool RazerDeathstalker = false;

        private Corale.Colore.Razer.Keyboard.Effects.Custom keyboardGrid = Corale.Colore.Razer.Keyboard.Effects.Custom.Create();
        private Corale.Colore.Razer.Mouse.Effects.Custom mouseGrid = Corale.Colore.Razer.Mouse.Effects.Custom.Create();
        private Corale.Colore.Razer.Mousepad.Effects.Custom mousepadGrid = Corale.Colore.Razer.Mousepad.Effects.Custom.Create();

        public void InitializeRazerSDK() {

            string arch = "";
            //string arch = @"C:\Program Files\Razer Chroma SDK\bin\RzChromaSDK64.dll";

            if (Environment.Is64BitOperatingSystem == true)
            {
                arch = Environment.GetEnvironmentVariable("ProgramW6432") + @"\Razer Chroma SDK\bin\RzChromaSDK64.dll";
                WriteConsole(ConsoleTypes.SYSTEM, "Architecture: x64");
            }
            else
            {
                arch = Environment.GetEnvironmentVariable("ProgramFiles(x86)") + @"\Razer Chroma SDK\bin\RzChromaSDK.dll";
                WriteConsole(ConsoleTypes.SYSTEM, "Architecture: x86");
            }

            if (File.Exists(arch))
            {
                WriteConsole(ConsoleTypes.RAZER, "Razer SDK Detected: " + arch);

                if (Chroma.SdkAvailable == false)
                {
                    RazerSDK = false;
                    WriteConsole(ConsoleTypes.RAZER, "Razer SDK not found");
                }
                else
                {
                    RazerSDK = true;
                }
            }
            else
            {
                //Razer SDK DLL Not Found
                
                if (Environment.Is64BitOperatingSystem == true)
                {
                    WriteConsole(ConsoleTypes.RAZER, "The Razer SDK (RzChromaSDK64.dll) Could not be found on this computer. Please install Synapse and restart ACT if you wish to use Chromatics with Razer devices.");
                }
                else
                {
                    WriteConsole(ConsoleTypes.RAZER, "The Razer SDK (RzChromaSDK.dll) Could not be found on this computer. Please install Synapse and restart ACT if you wish to use Chromatics with Razer devices.");
                }

                RazerSDK = false;
            }

            
            if (RazerSDK == true)
            {
                WriteConsole(ConsoleTypes.RAZER, "Start Colore Setup");

                if (Chroma.Instance.Initialized != true)
                {
                    WriteConsole(ConsoleTypes.RAZER, "Attempting to load Colore..");
                    Chroma.Instance.Initialize();
                }
                else
                {
                    WriteConsole(ConsoleTypes.RAZER, "Colore Already loaded.");
                }


                RazerUpdateState("static", System.Drawing.Color.DeepSkyBlue, false);
                WriteConsole(ConsoleTypes.RAZER, "Razer SDK Loaded");
                RazerSDKCalled = 1;

                ResetRazerDevices();


            }
        }

        public void ResetRazerDevices()
        {
            if (RazerSDK == true)
            {
                //Handled by file operations

                RazerDeathstalker = Chroma.Instance.Query(Corale.Colore.Razer.Devices.Deathstalker).Connected;

                /*
                RazerDeviceKeyboard = true;
                RazerDeviceKeypad = true;
                RazerDeviceMouse = true;
                RazerDeviceMousepad = true;
                RazerDeviceHeadset = true;
                */
            }
            else
            {
                RazerDeviceKeyboard = false;
                RazerDeviceKeypad = false;
                RazerDeviceMouse = false;
                RazerDeviceMousepad = false;
                RazerDeviceHeadset = false;
            }

            ResetDeviceDataGrid();
        }

        //Handle device send/recieve
        private CancellationTokenSource RCTS = new CancellationTokenSource();
        public void RazerUpdateState(string type, System.Drawing.Color col, bool disablekeys, [Optional]System.Drawing.Color col2, [Optional]bool direction, [Optional]int speed)
        {
            MemoryTasks.Cleanup();
            uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
            uint RzCol2 = Corale.Colore.WinForms.Extensions.ToColoreColor(col2);

            if (type == "reset")
            {
                if (RazerSDK != false)
                {
                    try
                    {
                        if (RazerDeviceHeadset == true) { Headset.Instance.Clear(); }
                        if (RazerDeviceKeyboard == true && disablekeys != true) { Keyboard.Instance.Clear(); }
                        if (RazerDeviceKeypad == true) { Keypad.Instance.Clear(); }
                        if (RazerDeviceMouse == true) { Mouse.Instance.Clear(); }
                        if (RazerDeviceMousepad == true) { Mousepad.Instance.Clear(); }
                    }
                    catch { }
                }
            }
            else if (type == "static")
            {
                if (RazerSDK != false)
                {
                    Task _RzSt = new Task(() =>
                    {
                        try
                        {
                            if (RazerDeviceHeadset == true) { Headset.Instance.SetAll(RzCol); }
                            if (RazerDeviceKeyboard == true && disablekeys != true)
                            {
                                //Keyboard.Instance.SetAll(RzCol);
                                keyboardGrid.Set(RzCol);
                            }
                            if (RazerDeviceKeypad == true) { Keypad.Instance.SetAll(RzCol); }
                            if (RazerDeviceMouse == true)
                            {
                                //Mouse.Instance.SetAll(RzCol);
                                RazerApplyMapMouseLighting("ScrollWheel", col, false);
                                RazerApplyMapMouseLighting("Logo", col, false);
                                RazerApplyMapMouseLighting("Backlight", col, false);
                            }
                            if (RazerDeviceMousepad == true) { Mousepad.Instance.SetAll(RzCol); }
                        }
                        catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer (Static): " + ex.Message); }
                    });
                    MemoryTasks.Add(_RzSt);
                    MemoryTasks.Run(_RzSt);
                }
            }
            else if (type == "transition")
            {
                if (RazerSDK != false)
                {
                    Task _RzSt = new Task(() =>
                    {
                        if (RazerDeviceHeadset == true) { Headset.Instance.SetAll(RzCol); }
                        if (RazerDeviceKeyboard == true && disablekeys != true)
                        {
                            Razertransition(col, direction);
                        }
                        if (RazerDeviceKeypad == true) { Keypad.Instance.SetAll(RzCol); }
                        if (RazerDeviceMouse == true) { Mouse.Instance.SetAll(RzCol); }
                        if (RazerDeviceMousepad == true) { Mousepad.Instance.SetAll(RzCol); }
                    });
                    MemoryTasks.Add(_RzSt);
                    MemoryTasks.Run(_RzSt);
                }
            }
            else if (type == "wave")
            {
                if (RazerSDK != false)
                {
                    Task _RzSt = new Task(() =>
                    {
                        try
                        {
                            if (RazerDeviceHeadset == true) { Headset.Instance.SetEffect(Corale.Colore.Razer.Headset.Effects.Effect.SpectrumCycling); }
                            if (RazerDeviceKeyboard == true && !RazerDeathstalker && disablekeys != true) { Keyboard.Instance.SetWave(Corale.Colore.Razer.Keyboard.Effects.Direction.LeftToRight); }
                            if (RazerDeviceKeypad == true) { Keypad.Instance.SetWave(Corale.Colore.Razer.Keypad.Effects.Direction.LeftToRight); }
                            if (RazerDeviceMouse == true) { Mouse.Instance.SetWave(Corale.Colore.Razer.Mouse.Effects.Direction.FrontToBack); }
                            if (RazerDeviceMousepad == true) { Mousepad.Instance.SetWave(Corale.Colore.Razer.Mousepad.Effects.Direction.LeftToRight); }
                        }
                        catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer (Wave): " + ex.Message); }
                    });
                    MemoryTasks.Add(_RzSt);
                    MemoryTasks.Run(_RzSt);
                }
            }
            else if (type == "breath")
            {
                if (RazerSDK != false)
                {
                    Task _RzSt = new Task(() =>
                    {
                        try
                        {
                            if (RazerDeviceHeadset == true) { Headset.Instance.SetBreathing(RzCol); }
                            if (RazerDeviceKeypad == true) { Keypad.Instance.SetBreathing(RzCol, RzCol2); }
                            if (RazerDeviceMouse == true)
                            {
                                Mouse.Instance.SetBreathing(RzCol, RzCol2, Led.Backlight);
                                Mouse.Instance.SetBreathing(RzCol, RzCol2, Led.Logo);
                                Mouse.Instance.SetBreathing(RzCol, RzCol2, Led.ScrollWheel);
                            }
                            if (RazerDeviceMousepad == true) { Mousepad.Instance.SetBreathing(RzCol, RzCol2); }
                            if (RazerDeviceKeyboard == true && disablekeys != true) { Keyboard.Instance.SetBreathing(RzCol, RzCol2); }
                        }
                        catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer (Breath): " + ex.Message); }
                    });
                    MemoryTasks.Add(_RzSt);
                    MemoryTasks.Run(_RzSt);
                }

            }
            else if (type == "pulse")
            {
                if (RazerSDK != false)
                {
                    Task _RzSt = new Task(() =>
                    {
                        if (RazerDeviceHeadset == true) { Headset.Instance.SetAll(RzCol); }
                        if (RazerDeviceKeyboard == true && disablekeys != true)
                        {
                            RazertransitionConst(col, col2, true, speed);

                        }
                        if (RazerDeviceKeypad == true) { Keypad.Instance.SetAll(RzCol); }
                        if (RazerDeviceMouse == true) { Mouse.Instance.SetAll(RzCol); }
                        if (RazerDeviceMousepad == true) { Mousepad.Instance.SetAll(RzCol); }
                    }, RCTS.Token);
                    MemoryTasks.Add(_RzSt);
                    MemoryTasks.Run(_RzSt);
                    //RzPulse = true;
                }
            }

            MemoryTasks.Cleanup();
        }

        public void RazerKeyboardUpdate()
        {
            if (!HoldReader)
            {
                Chroma.Instance.Keyboard.SetCustom(keyboardGrid);
            }
        }

        public void RazerApplyMapKeyLighting(string key, System.Drawing.Color col, bool clear)
        {
            //keyboardGrid
            uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
            if (RazerSDK != false)
            {
                //Send Lighting
                if (RazerDeviceKeyboard == true)
                {
                    try
                    {
                        if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                        {
                            Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);

                            if (clear)
                            {
                                if (Keyboard.Instance[keyid].Value != RzCol)
                                {
                                    Keyboard.Instance.SetKey(keyid, RzCol, clear);
                                }
                            }
                            else
                            {
                                if (keyboardGrid[keyid].Value != RzCol)
                                {
                                    keyboardGrid[keyid] = RzCol;
                                }
                            }
                            
                        }
                    }
                    catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer Keyboard (" + key + "): " + ex.Message); }
                }
            }
        }

        public void RazerApplyMapLogoLighting(string key, System.Drawing.Color col, bool clear)
        {

            uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
            if (RazerSDK != false)
            {
                //Send Lighting
                if (RazerDeviceKeyboard == true)
                {
                    try
                    {
                        if (Keyboard.Instance[0, 20].Value != RzCol)
                        {
                            Keyboard.Instance.SetPosition(0, 20, RzCol, clear);
                        }
                    }
                    catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer (MapLogo): " + ex.Message); }
                }
            }
        }

        public void RazerApplyMapMouseLighting(string region, System.Drawing.Color col, bool clear)
        {

            uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
            if (RazerSDK != false)
            {
                //Send Lighting
                if (RazerDeviceMouse == true)
                {
                    try
                    {
                        if (region == "Backlight")
                        {
                            if (Mouse.Instance[GridLed.Backlight].Value != RzCol)
                            {
                                Corale.Colore.Core.Mouse.Instance[GridLed.Backlight] = RzCol;
                            }
                        }
                        else
                        {
                            if (Enum.IsDefined(typeof(Corale.Colore.Razer.Mouse.Led), region))
                            {
                                Corale.Colore.Razer.Mouse.Led regionid = (Corale.Colore.Razer.Mouse.Led)Enum.Parse(typeof(Corale.Colore.Razer.Mouse.Led), region);
                                if (Mouse.Instance[regionid].Value != RzCol)
                                {
                                    Mouse.Instance.SetLed(regionid, RzCol, clear);
                                }
                            }
                        }
                    }
                    catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer Mouse (" + region + "): " + ex.Message); }
                }
            }
        }

        public void RazerApplyMapPadLighting(int region, System.Drawing.Color col, bool clear)
        {

            uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
            if (RazerSDK != false)
            {
                try
                {
                    if (RazerDeviceMousepad == true)
                    {
                        if (Mousepad.Instance[region].Value != RzCol)
                        {
                            Corale.Colore.Core.Mousepad.Instance[region] = RzCol;
                        }
                    }
                }
                catch (Exception ex) { WriteConsole(ConsoleTypes.ERROR, "Razer Mousepad (" + region + "): " + ex.Message); }
            }
        }

        static readonly object _Razertransition = new object();
        private void Razertransition(System.Drawing.Color col, bool forward)
        {
            lock (_Razertransition)
            {
                if (RazerDeviceKeyboard == true)
                {
                    uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col);
                    for (uint c = 0; c < Corale.Colore.Razer.Keyboard.Constants.MaxColumns; c++)
                    {
                        for (uint r = 0; r < Corale.Colore.Razer.Keyboard.Constants.MaxRows; r++)
                        {
                            var row = (forward) ? r : Corale.Colore.Razer.Keyboard.Constants.MaxRows - r - 1;
                            var colu = (forward) ? c : Corale.Colore.Razer.Keyboard.Constants.MaxColumns - c - 1;
                            Keyboard.Instance[Convert.ToInt32(row), Convert.ToInt32(colu)] = RzCol;
                        }
                        Thread.Sleep(15);
                    }
                }
            }
        }

        string[] _Rzkeys = { "Y", "D5", "D6", "D7", "T", "U", "G", "H", "J", "F3", "F4", "F5", "F6", "F7", "D4", "D8", "R", "F", "C", "V", "B", "N", "M", "K", "I", "F2", "F8", "D3", "E", "D", "X", "Space", "OemComma", "L", "O", "D9", "F1", "F9", "D2", "D0", "W", "S", "Z", "LeftAlt", "P", "OemSemicolon", "OemPeriod", "RightAlt", "D1", "Q", "A", "LeftWindows", "F10", "OemMinus", "OemLeftBracket", "OemApostrophe", "OemSlash", "Function", "Escape", "OemTilde", "Tab", "CapsLock", "LeftShift", "LeftControl", "F11", "OemEquals", "RightMenu", "OemRightBracket", "Macro1", "Macro2", "Macro3", "Macro4", "Macro5", "F12", "Backspace", "OemBackslash", "Enter", "RightShift", "RightControl" };
        string[] _Rzkeys2 = { "Y", "D5", "D6", "D7", "T", "U", "G", "H", "J", "D4", "D8", "R", "F", "C", "V", "B", "N", "M", "K", "I", "D3", "E", "D", "X", "Space", "OemComma", "L", "O", "D9", "D2", "D0", "W", "S", "Z", "LeftAlt", "P", "OemSemicolon", "OemPeriod", "RightAlt", "D1", "Q", "A", "LeftWindows", "OemMinus", "OemLeftBracket", "OemApostrophe", "OemSlash", "Function", "Escape", "OemTilde", "Tab", "CapsLock", "LeftShift", "LeftControl", "OemEquals", "RightMenu", "OemRightBracket", "Macro1", "Macro2", "Macro3", "Macro4", "Macro5", "Backspace", "OemBackslash", "Enter", "RightShift", "RightControl" };
        string[] _Rzkeys3 = { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "NumLock", "Num0", "Num1", "Num2", "Num3", "Num4", "Num5", "Num6", "Num7", "Num8", "Num9", "NumDivide", "NumMultiply", "NumSubtract", "NumAdd", "NumEnter", "NumDecimal" };
        string[] _Rzstep0 = { "Y" };
        string[] _Rzstep1 = { "D5", "D6", "D7", "T", "U", "G", "H", "J" };
        string[] _Rzstep2 = { "F3", "F4", "F5", "F6", "F7", "D4", "D8", "R", "F", "C", "V", "B", "N", "M", "K", "I" };
        string[] _Rzstep3 = { "F2", "F8", "D3", "E", "D", "X", "Space", "OemComma", "L", "O", "D9" };
        string[] _Rzstep4 = { "F1", "F9", "D2", "D0", "W", "S", "Z", "LeftAlt", "P", "OemSemicolon", "OemPeriod", "RightAlt" };
        string[] _Rzstep5 = { "D1", "Q", "A", "LeftWindows", "F10", "OemMinus", "OemLeftBracket", "OemApostrophe", "OemSlash", "Function" };
        string[] _Rzstep6 = { "Escape", "OemTilde", "Tab", "CapsLock", "LeftShift", "LeftControl", "F11", "OemEquals", "RightMenu", "OemRightBracket", "OemBackslash" };
        string[] _Rzstep7 = { "Macro1", "Macro2", "Macro3", "Macro4", "Macro5", "F12", "Backspace", "Enter", "RightShift", "RightControl" };

        static readonly object _RazerRipple1 = new object();
        public void RazerRipple1(System.Drawing.Color burstcol, int speed)
        {
            lock (_RazerRipple1)
            {
                if (RazerDeviceKeyboard == true)
                {
                    Dictionary<string, System.Drawing.Color> presets = new Dictionary<string, System.Drawing.Color>();
                    var refreshGrid = Corale.Colore.Razer.Keyboard.Effects.Custom.Create();
                    refreshGrid = keyboardGrid;

                    for (int i = 0; i <= 9; i++)
                    {
                        if (i == 0)
                        {
                            //Setup

                            foreach (string key in _Rzkeys)
                            {
                                Corale.Colore.Razer.Keyboard.Key fkey = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                Corale.Colore.Core.Color cc = keyboardGrid[fkey]; //Keyboard.Instance[fkey];
                                System.Drawing.Color ccX = Corale.Colore.WinForms.Extensions.ToSystemColor(cc); //System.Drawing.Color.FromArgb(cc.R, cc.G, cc.B);
                                presets.Add(key, ccX);
                            }

                            //Keyboard.Instance.SetCustom(keyboard_custom);

                            //Chroma.Instance.Keyboard.SetCustom(keyboardGrid);
                            HoldReader = true;

                        }
                        else if (i == 1)
                        {
                            //Step 0
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep0, key);
                                if (pos > -1)
                                {
                                    //RazerApplyMapKeyLighting(key, burstcol, true);
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    //RazerApplyMapKeyLighting(key, presets[key], true);
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 2)
                        {
                            //Step 1
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep1, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 3)
                        {
                            //Step 2
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep2, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            //Step 3
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep3, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 5)
                        {
                            //Step 4
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep4, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 6)
                        {
                            //Step 5
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep5, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 7)
                        {
                            //Step 6
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep6, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 8)
                        {
                            //Step 7
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep7, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 9)
                        {
                            //Spin down

                            foreach (string key in _Rzkeys)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    //RazerApplyMapKeyLighting(key, presets[key], true);
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                }
                            }
                            
                            presets.Clear();
                            HoldReader = false;

                            //MemoryReaderLock.Enabled = true;
                        }

                        if (i < 9)
                        {
                            Thread.Sleep(speed);
                        }

                        Chroma.Instance.Keyboard.SetCustom(refreshGrid);
                    }
                }
            }
        }


        static readonly object _RazerRipple2 = new object();
        public void RazerRipple2(System.Drawing.Color burstcol, int speed)
        {
            lock (_RazerRipple2)
            {
                if (RazerDeviceKeyboard == true)
                {
                    Dictionary<string, System.Drawing.Color> presets = new Dictionary<string, System.Drawing.Color>();
                    var refreshGrid = Corale.Colore.Razer.Keyboard.Effects.Custom.Create();
                    refreshGrid = keyboardGrid;

                    for (int i = 0; i <= 9; i++)
                    {
                        if (i == 0)
                        {
                            //Setup

                            foreach (string key in _Rzkeys)
                            {
                                Corale.Colore.Razer.Keyboard.Key fkey = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                Corale.Colore.Core.Color cc = keyboardGrid[fkey];
                                System.Drawing.Color ccX = Corale.Colore.WinForms.Extensions.ToSystemColor(cc);
                                presets.Add(key, ccX);
                            }

                            //Keyboard.Instance.SetCustom(keyboard_custom);

                            HoldReader = true;

                        }
                        else if (i == 1)
                        {
                            //Step 0
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep0, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 2)
                        {
                            //Step 1
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep1, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 3)
                        {
                            //Step 2
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep2, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            //Step 3
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep3, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 5)
                        {
                            //Step 4
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep4, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 6)
                        {
                            //Step 5
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep5, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 7)
                        {
                            //Step 6
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep6, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 8)
                        {
                            //Step 7
                            foreach (string key in _Rzkeys)
                            {
                                int pos = Array.IndexOf(_Rzstep7, key);
                                if (pos > -1)
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                    }
                                }
                                else
                                {
                                    if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                    {
                                        Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                        refreshGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                    }
                                }
                            }
                        }
                        else if (i == 9)
                        {
                            //Spin down

                            foreach (string key in _Rzkeys)
                            {
                                //RazerApplyMapKeyLighting(key, presets[key], true);
                            }


                            //presets.Clear();
                            presets.Clear();
                            HoldReader = false;
                        }

                        if (i < 9)
                        {
                            Thread.Sleep(speed);
                        }

                        Chroma.Instance.Keyboard.SetCustom(refreshGrid);
                    }

                }
            }
        }


        static readonly object _RazerFlash1 = new object();
        public void RazerFlash1(System.Drawing.Color burstcol, int speed)
        {
            lock (_RazerFlash1)
            {
                Dictionary<string, System.Drawing.Color> presets = new Dictionary<string, System.Drawing.Color>();
                Corale.Colore.Core.Color ScrollWheel = new Corale.Colore.Core.Color();
                Corale.Colore.Core.Color Logo = new Corale.Colore.Core.Color();
                Corale.Colore.Core.Color Backlight = new Corale.Colore.Core.Color();
                Corale.Colore.Core.Color Pad1 = new Corale.Colore.Core.Color();
                Corale.Colore.Core.Color Pad2 = new Corale.Colore.Core.Color();

                System.Drawing.Color Pad1Conv = System.Drawing.Color.FromArgb(Pad1.R, Pad1.G, Pad1.B);
                System.Drawing.Color Pad2Conv = System.Drawing.Color.FromArgb(Pad2.R, Pad2.G, Pad2.B);
                System.Drawing.Color ScrollWheelConv = System.Drawing.Color.FromArgb(ScrollWheel.R, ScrollWheel.G, ScrollWheel.B);
                System.Drawing.Color LogoConv = System.Drawing.Color.FromArgb(Logo.R, Logo.G, Logo.B);
                System.Drawing.Color BacklightConv = System.Drawing.Color.FromArgb(Backlight.R, Backlight.G, Backlight.B);

                var refreshKeyGrid = Corale.Colore.Razer.Keyboard.Effects.Custom.Create();
                refreshKeyGrid = keyboardGrid;

                for (int i = 0; i <= 8; i++)
                {
                    if (i == 0)
                    {
                        //Setup

                        if (RazerDeviceKeyboard == true)
                        {
                            foreach (string key in _Rzkeys3)
                            {
                                Corale.Colore.Razer.Keyboard.Key fkey = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                Corale.Colore.Core.Color cc = keyboardGrid[fkey]; //Keyboard.Instance[fkey];
                                System.Drawing.Color ccX = Corale.Colore.WinForms.Extensions.ToSystemColor(cc);
                                presets.Add(key, ccX);
                            }
                        }

                        if (RazerDeviceMouse == true)
                        {
                            ScrollWheel = Mouse.Instance[1];
                            Logo = Mouse.Instance[2];
                            Backlight = Mouse.Instance[3];
                            Pad1 = Mousepad.Instance[7];
                            Pad2 = Mousepad.Instance[14];
                        }
                        //Keyboard.Instance.SetCustom(keyboard_custom);

                        HoldReader = true;

                    }
                    else if (i == 1)
                    {
                        //Step 0
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                //RazerApplyMapKeyLighting(key, burstcol, true);
                                //refreshKeyGrid
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", burstcol, false);
                                RazerApplyMapMouseLighting("Logo", burstcol, false);
                                RazerApplyMapMouseLighting("Backlight", burstcol, false);
                            }
                            //RazerApplyMapPadLighting(5, burstcol, false);
                            //RazerApplyMapPadLighting(6, burstcol, false);
                            //RazerApplyMapPadLighting(7, burstcol, false);
                            //RazerApplyMapPadLighting(8, burstcol, false);
                            //RazerApplyMapPadLighting(9, burstcol, false);
                            if (RazerDeviceHeadset == true) { Headset.Instance.SetAll(Pad1); }
                            
                        }
                    }
                    else if (i == 2)
                    {
                        //Step 1
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", ScrollWheelConv, false);
                                RazerApplyMapMouseLighting("Logo", LogoConv, false);
                                RazerApplyMapMouseLighting("Backlight", BacklightConv, false);
                            }
                            //RazerApplyMapPadLighting(5, Pad1Conv, true);
                            //RazerApplyMapPadLighting(6, Pad1Conv, true);
                            //RazerApplyMapPadLighting(7, Pad1Conv, true);
                            //RazerApplyMapPadLighting(8, Pad1Conv, true);
                            //RazerApplyMapPadLighting(9, Pad1Conv, true);
                        }
                    }
                    else if (i == 3)
                    {
                        //Step 2
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", burstcol, false);
                                RazerApplyMapMouseLighting("Logo", burstcol, false);
                                RazerApplyMapMouseLighting("Backlight", burstcol, false);
                            }
                            //RazerApplyMapPadLighting(5, burstcol, true);
                            //RazerApplyMapPadLighting(6, burstcol, true);
                            //RazerApplyMapPadLighting(7, burstcol, true);
                            //RazerApplyMapPadLighting(8, burstcol, true);
                            //RazerApplyMapPadLighting(9, burstcol, true);
                        }
                    }
                    else if (i == 4)
                    {
                        //Step 3
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", ScrollWheelConv, false);
                                RazerApplyMapMouseLighting("Logo", LogoConv, false);
                                RazerApplyMapMouseLighting("Backlight", BacklightConv, false);
                            }
                            //RazerApplyMapPadLighting(5, Pad1Conv, true);
                            //RazerApplyMapPadLighting(6, Pad1Conv, true);
                            //RazerApplyMapPadLighting(7, Pad1Conv, true);
                            //RazerApplyMapPadLighting(8, Pad1Conv, true);
                            //RazerApplyMapPadLighting(9, Pad1Conv, true);
                        }
                    }
                    else if (i == 5)
                    {
                        //Step 4
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", burstcol, false);
                                RazerApplyMapMouseLighting("Logo", burstcol, false);
                                RazerApplyMapMouseLighting("Backlight", burstcol, false);
                            }
                            //RazerApplyMapPadLighting(5, burstcol, true);
                            //RazerApplyMapPadLighting(6, burstcol, true);
                            //RazerApplyMapPadLighting(7, burstcol, true);
                            //RazerApplyMapPadLighting(8, burstcol, true);
                            //RazerApplyMapPadLighting(9, burstcol, true);
                        }
                    }
                    else if (i == 6)
                    {
                        //Step 5
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", ScrollWheelConv, false);
                                RazerApplyMapMouseLighting("Logo", LogoConv, false);
                                RazerApplyMapMouseLighting("Backlight", BacklightConv, false);
                            }
                            //RazerApplyMapPadLighting(5, Pad1Conv, true);
                            //RazerApplyMapPadLighting(6, Pad1Conv, true);
                            //RazerApplyMapPadLighting(7, Pad1Conv, true);
                            //RazerApplyMapPadLighting(8, Pad1Conv, true);
                            //RazerApplyMapPadLighting(9, Pad1Conv, true);
                        }
                    }
                    else if (i == 7)
                    {
                        //Step 6
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(burstcol);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", burstcol, false);
                                RazerApplyMapMouseLighting("Logo", burstcol, false);
                                RazerApplyMapMouseLighting("Backlight", burstcol, false);
                            }
                            //RazerApplyMapPadLighting(5, burstcol, true);
                            //RazerApplyMapPadLighting(6, burstcol, true);
                            //RazerApplyMapPadLighting(7, burstcol, true);
                            //RazerApplyMapPadLighting(8, burstcol, true);
                            //RazerApplyMapPadLighting(9, burstcol, true);
                        }
                    }
                    else if (i == 8)
                    {
                        //Step 7
                        foreach (string key in _Rzkeys3)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                if (Enum.IsDefined(typeof(Corale.Colore.Razer.Keyboard.Key), key))
                                {
                                    //RazerApplyMapKeyLighting(key, presets[key], true);
                                    Corale.Colore.Razer.Keyboard.Key keyid = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), key);
                                    refreshKeyGrid[keyid] = Corale.Colore.WinForms.Extensions.ToColoreColor(presets[key]);
                                }
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("ScrollWheel", ScrollWheelConv, false);
                                RazerApplyMapMouseLighting("Logo", LogoConv, false);
                                RazerApplyMapMouseLighting("Backlight", BacklightConv, false);
                            }
                            //RazerApplyMapPadLighting(5, Pad1Conv, true);
                            //RazerApplyMapPadLighting(6, Pad1Conv, true);
                            //RazerApplyMapPadLighting(7, Pad1Conv, true);
                            //RazerApplyMapPadLighting(8, Pad1Conv, true);
                            //RazerApplyMapPadLighting(9, Pad1Conv, true);
                            if (RazerDeviceHeadset == true) { Headset.Instance.SetAll(Pad1); }
                        }

                        presets.Clear();
                        HoldReader = false;
                    }

                    if (i < 8)
                    {
                        Thread.Sleep(speed);
                    }

                    Chroma.Instance.Keyboard.SetCustom(refreshKeyGrid);
                }
            }
        }

        int _RazerFlash2Step = 0;
        bool _RazerFlash2Running = false;
        //Dictionary<string, System.Drawing.Color> _Rzpresets = new Dictionary<string, System.Drawing.Color>();
        Corale.Colore.Core.Color RzScrollWheel = new Corale.Colore.Core.Color();
        Corale.Colore.Core.Color RzLogo = new Corale.Colore.Core.Color();
        Corale.Colore.Core.Color RzPrintScr = new Corale.Colore.Core.Color();
        Corale.Colore.Core.Color RzScrollLk = new Corale.Colore.Core.Color();
        Corale.Colore.Core.Color RzPauseBrk = new Corale.Colore.Core.Color();
        System.Drawing.Color RzPrintScrConv = new System.Drawing.Color();
        System.Drawing.Color RzScrollLkConv = new System.Drawing.Color();
        System.Drawing.Color RzPauseBrkConv = new System.Drawing.Color();
        System.Drawing.Color RzScrollWheelConv = new System.Drawing.Color();
        System.Drawing.Color RzLogoConv = new System.Drawing.Color();
        static readonly object _RazerFlash2 = new object();
        public void RazerFlash2(System.Drawing.Color burstcol, int speed)
        {
            lock (_RazerFlash2)
            {
                if (_RazerFlash2Running == false)
                {
                    if (RazerDeviceMouse == true)
                    {
                        RzScrollWheel = Mouse.Instance[1];
                        RzLogo = Mouse.Instance[2];
                    }

                    if (RazerDeviceKeyboard == true)
                    {
                        Corale.Colore.Razer.Keyboard.Key _PrintScr = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), "PrintScreen");
                        RzPrintScr = Keyboard.Instance[_PrintScr];

                        Corale.Colore.Razer.Keyboard.Key _ScrollLk = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), "Scroll");
                        RzScrollLk = Keyboard.Instance[_ScrollLk];

                        Corale.Colore.Razer.Keyboard.Key _PauseBrk = (Corale.Colore.Razer.Keyboard.Key)Enum.Parse(typeof(Corale.Colore.Razer.Keyboard.Key), "Pause");
                        RzPauseBrk = Keyboard.Instance[_PauseBrk];

                        RzScrollWheelConv = System.Drawing.Color.FromArgb(RzScrollWheel.R, RzScrollWheel.G, RzScrollWheel.B);
                        RzLogoConv = System.Drawing.Color.FromArgb(RzLogo.R, RzLogo.G, RzLogo.B);

                        RzPrintScrConv = Corale.Colore.WinForms.Extensions.ToSystemColor(RzPrintScr);
                        RzScrollLkConv = Corale.Colore.WinForms.Extensions.ToSystemColor(RzScrollLk);
                        RzPauseBrkConv = Corale.Colore.WinForms.Extensions.ToSystemColor(RzPauseBrk);
                    }

                    _RazerFlash2Running = true;
                }
                else
                {
                    while (_RazerFlash2Running == true)
                    {
                        if (_RazerFlash2Step == 0)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                RazerApplyMapKeyLighting("PrintScreen", burstcol, true);
                                RazerApplyMapKeyLighting("Scroll", burstcol, true);
                                RazerApplyMapKeyLighting("Pause", burstcol, true);
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("RzScrollWheel", burstcol, true);
                                RazerApplyMapMouseLighting("RzLogo", burstcol, true);
                            }
                            _RazerFlash2Step = 1;

                            Thread.Sleep(speed);
                        }
                        else if (_RazerFlash2Step == 1)
                        {
                            if (RazerDeviceKeyboard == true)
                            {
                                RazerApplyMapKeyLighting("PrintScreen", RzPrintScrConv, true);
                                RazerApplyMapKeyLighting("Scroll", RzScrollLkConv, true);
                                RazerApplyMapKeyLighting("Pause", RzPauseBrkConv, true);
                            }
                            if (RazerDeviceMouse == true)
                            {
                                RazerApplyMapMouseLighting("RzScrollWheel", RzScrollWheelConv, true);
                                RazerApplyMapMouseLighting("RzLogo", RzLogoConv, true);
                            }
                            _RazerFlash2Step = 0;

                            Thread.Sleep(speed);
                        }
                    }
                }
            }
        }


        static readonly object _RazertransitionConst = new object();
        public void RazertransitionConst(System.Drawing.Color col1, System.Drawing.Color col2, bool forward, int speed)
        {
            lock (_RazertransitionConst)
            {
                if (RazerDeviceKeyboard == true)
                {
                    int i = 1;
                    uint RzCol = Corale.Colore.WinForms.Extensions.ToColoreColor(col1);
                    uint RzCol2 = Corale.Colore.WinForms.Extensions.ToColoreColor(col2);

                    while (state == 6)
                    {
                        RCTS.Token.ThrowIfCancellationRequested();
                        if (i == 1)
                        {
                            for (uint c = 0; c < Corale.Colore.Razer.Keyboard.Constants.MaxColumns; c++)
                            {
                                for (uint r = 0; r < Corale.Colore.Razer.Keyboard.Constants.MaxRows; r++)
                                {
                                    if (state != 6) { break; }
                                    var row = (forward) ? r : Corale.Colore.Razer.Keyboard.Constants.MaxRows - r - 1;
                                    var colu = (forward) ? c : Corale.Colore.Razer.Keyboard.Constants.MaxColumns - c - 1;
                                    try
                                    {
                                        Keyboard.Instance[Convert.ToInt32(row), Convert.ToInt32(colu)] = RzCol;
                                    }
                                    catch (Exception)
                                    {
                                        //Debug.WriteLine(ex.Message);
                                        //rtb_console.AppendText(ex.Message + " \r\n");
                                    }

                                }
                                Thread.Sleep(speed);
                            }
                            i = 2;
                        }
                        else if (i == 2)
                        {
                            for (uint c = 0; c < Corale.Colore.Razer.Keyboard.Constants.MaxColumns; c++)
                            {
                                for (uint r = 0; r < Corale.Colore.Razer.Keyboard.Constants.MaxRows; r++)
                                {
                                    if (state != 6) { break; }
                                    var row = (forward) ? r : Corale.Colore.Razer.Keyboard.Constants.MaxRows - r - 1;
                                    var colu = (forward) ? c : Corale.Colore.Razer.Keyboard.Constants.MaxColumns - c - 1;
                                    try
                                    {
                                        Keyboard.Instance[Convert.ToInt32(row), Convert.ToInt32(colu)] = RzCol2;
                                    }
                                    catch (Exception)
                                    {
                                        //Debug.WriteLine(ex.Message);
                                        //rtb_console.AppendText(ex.Message + " \r\n");
                                    }
                                }
                                Thread.Sleep(speed);
                            }
                            i = 1;
                        }
                    }
                }
            }
        }

        Dictionary<string, string> Razerkeyids = new Dictionary<string, string>()
        {
            //Keys
            {"D1", "1 Key"},
            {"D2", "2 Key"},
            {"D3", "3 Key"},
            {"D4", "4 Key"},
            {"D5", "5 Key"},
            {"D6", "6 Key"},
            {"D7", "7 Key"},
            {"D8", "8 Key"},
            {"D9", "9 Key"},
            {"D0", "0 Key"},
            {"A", "A Key"},
            {"B", "B Key"},
            {"C", "C Key"},
            {"D", "D Key"},
            {"E", "E Key"},
            {"F", "F Key"},
            {"G", "G Key"},
            {"H", "H Key"},
            {"I", "I Key"},
            {"J", "J Key"},
            {"K", "K Key"},
            {"L", "L Key"},
            {"M", "M Key"},
            {"N", "N Key"},
            {"O", "O Key"},
            {"P", "P Key"},
            {"Q", "Q Key"},
            {"R", "R Key"},
            {"S", "S Key"},
            {"T", "T Key"},
            {"U", "U Key"},
            {"V", "V Key"},
            {"W", "W Key"},
            {"X", "X Key"},
            {"Y", "Y Key"},
            {"Z", "Z Key"},
            {"NumLock", "Numlock Key"},
            {"Num0", "Numlock 0"},
            {"Num1", "Numlock 1"},
            {"Num2", "Numlock 2"},
            {"Num3", "Numlock 3"},
            {"Num4", "Numlock 4"},
            {"Num5", "Numlock 5"},
            {"Num6", "Numlock 6"},
            {"Num7", "Numlock 7"},
            {"Num8", "Numlock 8"},
            {"Num9", "Numlock 9"},
            {"NumDivide", "Num Divide"},
            {"NumMultiply", "Num Multiply"},
            {"NumSubtract", "Num Subtract"},
            {"NumAdd", "Num Add"},
            {"NumEnter", "Num Enter"},
            {"NumDecimal", "Num Decimal"},
            {"PrintScreen", "Print Screen"},
            {"Scroll", "Scroll Lock"},
            {"Pause", "Pause Key"},
            {"Insert", "Insert Key"},
            {"Home", "Home Key"},
            {"PageUp", "Page Up"},
            {"PageDown", "Page Down"},
            {"Delete", "Delete Key"},
            {"End", "End Key"},
            {"Up", "Up Key"},
            {"Left", "Left Key"},
            {"Right", "Right Key"},
            {"Down", "Down Key"},
            {"Tab", "Tab Key"},
            {"CapsLock", "Caps Lock"},
            {"Backspace", "Backspace Key"},
            {"Enter", "Enter Key"},
            {"LeftControl", "Left Control"},
            {"LeftWindows", "Left Windows"},
            {"LeftAlt", "Left Alt"},
            {"Space", "Spacebar"},
            {"RightControl", "Right Control"},
            {"Function", "Fn Function"},
            {"RightAlt", "Right Alt"},
            {"RightMenu", "Right Menu"},
            {"LeftShift", "Left Shift"},
            {"RightShift", "Right Shift"},
            {"Macro1", "Macro 1"},
            {"Macro2", "Macro 2"},
            {"Macro3", "Macro 3"},
            {"Macro4", "Macro 4"},
            {"Macro5", "Macro 5"},
            {"OemTilde", "Tilde (~) Key"},
            {"OemMinus", "Minus (-) Key"},
            {"OemEquals", "Equals (=) Key"},
            {"OemLeftBracket", "Left square bracket ([)"},
            {"OemRightBracket", "Right square bracket (])"},
            {"OemSlash", "Forwardslash (/)"},
            {"OemSemicolon", "Semi-colon (;) Key"},
            {"OemApostrophe", "Apostrophe (') Key"},
            {"OemComma", "Comma (,) Key"},
            {"OemPeriod", "Period/full stop (.) Key"},
            {"OemBackslash", "Backslash Key"},
            {"EurPound", "Pound sign (#) Key"},
            {"JpnYen", "Yen (¥) Key"},
            {"Escape", "Esc Key"}
        };
    }
}
